== COURT TERME == 

~ Debug de la physique :
	- Corriger le fait de se tp à travers les collisions une fois sur deux (pitié j'en peux plus) - fait
	- Corriger le fait de se tp à travers les plateformes mouvantes (voir en bas) - fait
	- Corriger l'ascenseur qui nous fait partir en couilles si on bouge quand il commence à monter (voir en bas) - fait
	- Corriger les plateformes mouvantes du level debug qui niquent leurs positions une fois sur deux - en cours

~ Améliorations/optimisations de l'ECS :
	- Pour l'update du component manager, utiliser la liste de T au lieu de la liste de shared_ptr
[Plus rapide pour la mise en cache (dans le doute, profiler ça), comme le compiler va générer la classe template avec les différents types, possiblité d'appeler une fonction de component même sans cast]
	- Regarder si y'a moyen d'utiliser la liste de T à la place de la liste de weak_ptr aussi
	- Tester d'avoir typeid(T) en static pour que ça le compile qu'une fois ?
	- Regarder si ça marche bien l'appel à une fonction parent avec ClasseParent::fonction(), et si oui l'utiliser partout lol
	- Rajouter une option à la création d'une entity pour lui mettre un lifetime
[Fonctionnerai en créant un component si l'option a une valeur différente de 0 pour pas ajouter de fonctionnalité à la classe entity]

~ Petites updates d'améliorations :
	- Changer le nom de la "model matrix" du transform en "entity matrix" (techniquement c'est plus la matrice du modèle)
	- Refactor le "load game asset" du doomlike pour utiliser plus de fonctions et moins de copier coller
[Commencer à réfléchir au futur éditeur d'assets, comment il va pouvoir être utilisé pour le chargement aussi (chargement en cascade ?)]
	- Améliorer les textes debug
[Réduire la taille du texte fps, ajouter la durée de la frame en ms, ajouter textes quand pause & freecam]
	- Rajouter un repère visuel sur la position réelle des lights en mode draw debug
[Besoin de créer un bilboard renderer ?]
	- Regarder si c'est possible de récupérer le nom d'une classe pour les print warning de template ("unable to find component of given class")


== MOYEN TERME ==

~ Faire un éditeur d'assets (utiliser ImGUI pour l'interface)

~ Etendre l'éditeur d'assets pour faire un éditeur de préfab

~ Améliorer le doomlike avec l'éditeur de préfab


== LONG TERME == (étudier lequel est le plus important)

~ Mettre des particules (avec ces vidéos ? https://www.youtube.com/watch?v=4YhQJPD7ylQ)

~ Animations 3D : https://ogldev.org/www/tutorial38/tutorial38.html

~ Mettre un éditeur de level à partir de l'éditeur de prefabs


== PROGRAMMATION GRAPHIQUE == (aka j'ai envie mais pas le focus principal (au moins jusqu'à ce que j'ai trouvé un taff))

~ Partie "Advanced OpenGL" de learnopengl.com

~ Partie "Advanced Lighting" de learnopengl.com

~ Partie "PBR Lighting" de learnopengl.com


== TRES LONG TERME == (aka ça sera jamais fait)

~ "Finir" la physique avec la répulsion des collisions body/body (imagine pousser une caisse dans un mur oskour)

~ Mettre un système de physique supportant plus que du AABB

~ Mettre un éditeur complet :skull:


== AUTRES ==

~ Compute la direction des Spot Light en fonction de la rotation de l'Entity (avoir une rotation offset ? avoir un vecteur de direction offset ?)

~ Finir les sons dans le doomlike (mouvement ennemis, mur qui bouge, lumière qui s'allume)

~ Opti le rendering de texte pour utiliser moins de matrices, générer une matrice transform pour tout le texte et passer les position et scale des char via un vec4 au shader qui se charge de la fin des calculs ?

~ Débloquer la limite de FPS

~ Utiliser une state machine pour la logique de la classe game

~ Réussir à intégrer les collisions des sons de FMod

~ Mettre un text renderer component 3D

~ Etudier la question de la physique en fixed timestep (https://gafferongames.com/post/fix_your_timestep)

~ Intégrer des cullings pour le rendering (au moins le frustum culling)

~ Intégrer l'oct-tree pour les collisions

~ Améliorer les draw call: remplacer la liste de model renderer component, la liste de text renderer component, etc. par une liste de draw call avec toutes les infos nécessaires, ce qui permettrait au moins de les trier par shader et par material, ce qui serait beaucoup mieux que maintenant


== REFLEXIONS / PROBLEMES CONNUS ==

~ Réfléchir au fonctionnement du load asset des scenes, est-ce qu'il faudrait faire gaffe à l'utilisation de ram et unload genre les textures qui ne sont plus nécessaires ?