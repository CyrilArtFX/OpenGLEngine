== COURT TERME == (pour la fin d'artfx)

~ Partie graphismes:
	- Trouver des meilleures textures pour sol/murs/plafonds du doomlike - fait
	- Trouver un meilleur mesh pour l'escalier du doomlike - bof
	- Regarder pour améliorer les autres mesh du doomlike
	- Trouver des mesh sympa pour la partie présentation de l'ECS de la demoreel - fait

~ Partie dev pour la demoreel:
	- Faire le truc sympa pour montrer le son avec le bouton et le tooltip
	- Faire la scène de présentation du moteur avec des assets et de la lumière pas trop moches - fait
	- Faire la scène de présentation de l'ECS avec la caméra qui tourne et les assets qui s'ajoutent - fait
	- Faire la scène de présentation de la physique avec les différents systèmes qui existent

~ Partie bugfixes:
	- Corriger les rigidbody qui se collident eux-mêmes (voir en bas)
	- Corriger le fait de se tp à travers les plateformes mouvantes (voir en bas)
	- Corriger l'ascenseur qui nous fait partir en couilles si on bouge quand il commence à monter (voir en bas)
	- Corriger les plateformes mouvantes du level debug qui niquent leurs positions une fois sur deux

~ Autres:
	- Mettre les includes, les .lib et les .dll dans le git principal (doit pouvoir être lancé direct après un téléchargement)


== MOYEN TERME == (après artfx)

~ Faire un éditeur d'assets (utiliser ImGUI pour l'interface)

~ Etendre l'éditeur d'assets pour faire un éditeur de préfab

~ Mettre de meilleurs visuels pour le doomlike en utilisant l'éditeur de prefab


== LONG TERME == (voir lequel de ces trois là est le plus important pour trouver un taff)

~ Mettre des particules (avec ces vidéos ? https://www.youtube.com/watch?v=4YhQJPD7ylQ)

~ Animations 3D : https://ogldev.org/www/tutorial38/tutorial38.html

~ Mettre un éditeur de level à partir de l'éditeur de prefabs


== PROGRAMMATION GRAPHIQUE == (aka j'ai envie mais pas le focus principal (au moins jusqu'à ce que j'ai trouvé un taff))

~ Partie "Advanced OpenGL" de learnopengl.com

~ Partie "Advanced Lighting" de learnopengl.com

~ Partie "PBR Lighting" de learnopengl.com


== TRES LONG TERME == (aka ça sera jamais fait)

~ "Finir" la physique avec la répulsion des collisions body/body (imagine pousser une caisse dans un mur oskour)

~ Mettre un système de physique supportant plus que du AABB

~ Mettre un éditeur complet :skull:


== AUTRES ==

~ Pour l'update du component manager, utiliser la liste de T au lieu de la liste de shared_ptr, plus rapide pour la mise en cache (dans le doute, profiler ça), comme le compiler va générer la classe template avec les différents types, possiblité d'appeler une fonction de component même sans cast

~ Regarder si y'a moyen d'utiliser la liste de T à la place de la liste de weak_ptr aussi

~ tester d'avoir typeid(T) en static pour que ça le compile qu'une fois ?

~ Regarder si ça marche bien l'appel à une fonction parent avec ClasseParent::fonction(), et si oui l'utiliser partout lol

~ Changer le nom de la "model matrix" du transform, vu que c'est plus vraiment la matrice du modele, c'est la matrice de l'entity...

~ Compute la direction des Spot Light en fonction de la rotation de l'Entity (avoir une rotation offset ? avoir un vecteur de direction offset ?)

~ Refactor le "load game asset" du doomlike pour utiliser plus de fonctions et moins de copier coller

~ Améliorer les textes debug (réduire la taille du texte fps, ajouter la durée de la frame en ms, ajouter textes quand pause & freecam)

~ Rajouter un repère visuel sur la position réelle des lights en mode draw debug

~ Finir les sons dans le doomlike (mouvement ennemis, mur qui bouge, lumière qui s'allume)

~ Opti le rendering de texte pour utiliser moins de matrices, générer une matrice transform pour tout le texte et passer les position et scale des char via un vec4 au shader qui se charge de la fin des calculs ?

~ Débloquer la limite de FPS

~ Utiliser une state machine pour la logique de la classe game

~ Réussir à intégrer les collisions des sons de FMod

~ Mettre un text renderer component 3D

~ Etudier la question de la physique en fixed timestep (https://gafferongames.com/post/fix_your_timestep)

~ Intégrer des cullings pour le rendering (au moins le frustum culling)

~ Intégrer l'oct-tree pour les collisions

~ Améliorer les draw call: remplacer la liste de model renderer component, la liste de text renderer component, etc. par une liste de draw call avec toutes les infos nécessaires, ce qui permettrait au moins de les trier par shader et par material, ce qui serait beaucoup mieux que maintenant


== REFLEXIONS / PROBLEMES CONNUS ==

~ Pb avec les rigidbodies, ils se collident avec eux même et partent en Y si ils ont un test channel qui les fait collide leur collision, besoin de faire un truc avec le raycast pour les empêcher de se collide eux-même, peut être avoir une autre fonction de raycast AABB uniquement pour ça qui a un fonctionnement un peu différent de celle de base ?

~ Y'a toujours des bugs bizarre avec les plateformes mouvantes qui monte (l'ascenseur) quand elle est immobile et qu'on est en train de bouger quand elle commence à grimper (voir si ça a un lien avec le step mechanic)

~ Problème avec la physique, si on touche par le bas une collision qui bouge, on est tp au dessus (j'ai l'impression que ça le fait seulement quand la collision qui bouge est en train de descendre)

~ Réfléchir au fonctionnement du load asset des scenes, est-ce qu'il faudrait faire gaffe à l'utilisation de ram et unload genre les textures qui ne sont plus nécessaires ?

~ Il peut y avoir des problèmes avec la physique notamment dans les coins ou entre des collisions quand on bouge et qu'on spam le saut, genre on est téléporté à travers d'autres collisions. Raison inconnue.